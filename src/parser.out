Grammar:

Rule 0     S' -> statement
Rule 1     statement -> IDENT  [precedence=left, level=3]
Rule 2     statement -> IDENT = expr
Rule 3     statement -> expr
Rule 4     expr -> IDENT  [precedence=left, level=3]
Rule 5     expr -> STRING_CONSTANT  [precedence=left, level=3]
Rule 6     expr -> INT_CONSTANT
Rule 7     expr -> FLOAT_CONSTANT
Rule 8     expr -> NEW
Rule 9     expr -> NUMBER
Rule 10    expr -> ( expr )
Rule 11    expr -> - expr  [precedence=right, level=4]
Rule 12    expr -> expr % expr
Rule 13    expr -> expr / expr
Rule 14    expr -> expr * expr
Rule 15    expr -> expr - expr
Rule 16    expr -> expr + expr
Rule 17    expr -> RETURN
Rule 18    expr -> FLOAT

Unused terminals:

    BREAK
    PRINT
    IF
    LPAREN
    READ
    DIVIDE
    ELSE
    INT
    ASSIGN
    FOR
    NULL
    MINUS
    DEF
    LBRACE
    PLUS
    TIMES
    RPAREN
    STRING
    RBRACE

Terminals, with rules where they appear:

%                    : 12
(                    : 10
)                    : 10
*                    : 14
+                    : 16
-                    : 11 15
/                    : 13
=                    : 2
ASSIGN               : 
BREAK                : 
DEF                  : 
DIVIDE               : 
ELSE                 : 
FLOAT                : 18
FLOAT_CONSTANT       : 7
FOR                  : 
IDENT                : 1 2 4
IF                   : 
INT                  : 
INT_CONSTANT         : 6
LBRACE               : 
LPAREN               : 
MINUS                : 
NEW                  : 8
NULL                 : 
NUMBER               : 9
PLUS                 : 
PRINT                : 
RBRACE               : 
READ                 : 
RETURN               : 17
RPAREN               : 
STRING               : 
STRING_CONSTANT      : 5
TIMES                : 
error                : 

Nonterminals, with rules where they appear:

expr                 : 2 3 10 11 12 12 13 13 14 14 15 15 16 16
statement            : 0


state 0

    (0) S' -> . statement
    (1) statement -> . IDENT
    (2) statement -> . IDENT = expr
    (3) statement -> . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 2
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    statement                      shift and go to state 1
    expr                           shift and go to state 3

state 1

    (0) S' -> statement .


state 2

    (1) statement -> IDENT .
    (2) statement -> IDENT . = expr
    (4) expr -> IDENT .
  ! reduce/reduce conflict for $end resolved using rule 1 (statement -> IDENT .)
    $end            reduce using rule 1 (statement -> IDENT .)
    =               shift and go to state 13
    %               reduce using rule 4 (expr -> IDENT .)
    /               reduce using rule 4 (expr -> IDENT .)
    *               reduce using rule 4 (expr -> IDENT .)
    -               reduce using rule 4 (expr -> IDENT .)
    +               reduce using rule 4 (expr -> IDENT .)


state 3

    (3) statement -> expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
    $end            reduce using rule 3 (statement -> expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 4

    (5) expr -> STRING_CONSTANT .
    %               reduce using rule 5 (expr -> STRING_CONSTANT .)
    /               reduce using rule 5 (expr -> STRING_CONSTANT .)
    *               reduce using rule 5 (expr -> STRING_CONSTANT .)
    -               reduce using rule 5 (expr -> STRING_CONSTANT .)
    +               reduce using rule 5 (expr -> STRING_CONSTANT .)
    $end            reduce using rule 5 (expr -> STRING_CONSTANT .)
    )               reduce using rule 5 (expr -> STRING_CONSTANT .)


state 5

    (6) expr -> INT_CONSTANT .
    %               reduce using rule 6 (expr -> INT_CONSTANT .)
    /               reduce using rule 6 (expr -> INT_CONSTANT .)
    *               reduce using rule 6 (expr -> INT_CONSTANT .)
    -               reduce using rule 6 (expr -> INT_CONSTANT .)
    +               reduce using rule 6 (expr -> INT_CONSTANT .)
    $end            reduce using rule 6 (expr -> INT_CONSTANT .)
    )               reduce using rule 6 (expr -> INT_CONSTANT .)


state 6

    (7) expr -> FLOAT_CONSTANT .
    %               reduce using rule 7 (expr -> FLOAT_CONSTANT .)
    /               reduce using rule 7 (expr -> FLOAT_CONSTANT .)
    *               reduce using rule 7 (expr -> FLOAT_CONSTANT .)
    -               reduce using rule 7 (expr -> FLOAT_CONSTANT .)
    +               reduce using rule 7 (expr -> FLOAT_CONSTANT .)
    $end            reduce using rule 7 (expr -> FLOAT_CONSTANT .)
    )               reduce using rule 7 (expr -> FLOAT_CONSTANT .)


state 7

    (8) expr -> NEW .
    %               reduce using rule 8 (expr -> NEW .)
    /               reduce using rule 8 (expr -> NEW .)
    *               reduce using rule 8 (expr -> NEW .)
    -               reduce using rule 8 (expr -> NEW .)
    +               reduce using rule 8 (expr -> NEW .)
    $end            reduce using rule 8 (expr -> NEW .)
    )               reduce using rule 8 (expr -> NEW .)


state 8

    (9) expr -> NUMBER .
    %               reduce using rule 9 (expr -> NUMBER .)
    /               reduce using rule 9 (expr -> NUMBER .)
    *               reduce using rule 9 (expr -> NUMBER .)
    -               reduce using rule 9 (expr -> NUMBER .)
    +               reduce using rule 9 (expr -> NUMBER .)
    $end            reduce using rule 9 (expr -> NUMBER .)
    )               reduce using rule 9 (expr -> NUMBER .)


state 9

    (10) expr -> ( . expr )
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 19

state 10

    (11) expr -> - . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 21

state 11

    (17) expr -> RETURN .
    %               reduce using rule 17 (expr -> RETURN .)
    /               reduce using rule 17 (expr -> RETURN .)
    *               reduce using rule 17 (expr -> RETURN .)
    -               reduce using rule 17 (expr -> RETURN .)
    +               reduce using rule 17 (expr -> RETURN .)
    $end            reduce using rule 17 (expr -> RETURN .)
    )               reduce using rule 17 (expr -> RETURN .)


state 12

    (18) expr -> FLOAT .
    %               reduce using rule 18 (expr -> FLOAT .)
    /               reduce using rule 18 (expr -> FLOAT .)
    *               reduce using rule 18 (expr -> FLOAT .)
    -               reduce using rule 18 (expr -> FLOAT .)
    +               reduce using rule 18 (expr -> FLOAT .)
    $end            reduce using rule 18 (expr -> FLOAT .)
    )               reduce using rule 18 (expr -> FLOAT .)


state 13

    (2) statement -> IDENT = . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 22

state 14

    (12) expr -> expr % . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 23

state 15

    (13) expr -> expr / . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 24

state 16

    (14) expr -> expr * . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 25

state 17

    (15) expr -> expr - . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 26

state 18

    (16) expr -> expr + . expr
    (4) expr -> . IDENT
    (5) expr -> . STRING_CONSTANT
    (6) expr -> . INT_CONSTANT
    (7) expr -> . FLOAT_CONSTANT
    (8) expr -> . NEW
    (9) expr -> . NUMBER
    (10) expr -> . ( expr )
    (11) expr -> . - expr
    (12) expr -> . expr % expr
    (13) expr -> . expr / expr
    (14) expr -> . expr * expr
    (15) expr -> . expr - expr
    (16) expr -> . expr + expr
    (17) expr -> . RETURN
    (18) expr -> . FLOAT
    IDENT           shift and go to state 20
    STRING_CONSTANT shift and go to state 4
    INT_CONSTANT    shift and go to state 5
    FLOAT_CONSTANT  shift and go to state 6
    NEW             shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 9
    -               shift and go to state 10
    RETURN          shift and go to state 11
    FLOAT           shift and go to state 12

    expr                           shift and go to state 27

state 19

    (10) expr -> ( expr . )
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
    )               shift and go to state 28
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 20

    (4) expr -> IDENT .
    )               reduce using rule 4 (expr -> IDENT .)
    %               reduce using rule 4 (expr -> IDENT .)
    /               reduce using rule 4 (expr -> IDENT .)
    *               reduce using rule 4 (expr -> IDENT .)
    -               reduce using rule 4 (expr -> IDENT .)
    +               reduce using rule 4 (expr -> IDENT .)
    $end            reduce using rule 4 (expr -> IDENT .)


state 21

    (11) expr -> - expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
    %               reduce using rule 11 (expr -> - expr .)
    /               reduce using rule 11 (expr -> - expr .)
    *               reduce using rule 11 (expr -> - expr .)
    -               reduce using rule 11 (expr -> - expr .)
    +               reduce using rule 11 (expr -> - expr .)
    $end            reduce using rule 11 (expr -> - expr .)
    )               reduce using rule 11 (expr -> - expr .)


state 22

    (2) statement -> IDENT = expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
    $end            reduce using rule 2 (statement -> IDENT = expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 23

    (12) expr -> expr % expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 12 (expr -> expr % expr .)
    )               reduce using rule 12 (expr -> expr % expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 24

    (13) expr -> expr / expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 13 (expr -> expr / expr .)
    )               reduce using rule 13 (expr -> expr / expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 25

    (14) expr -> expr * expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 14 (expr -> expr * expr .)
    )               reduce using rule 14 (expr -> expr * expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 26

    (15) expr -> expr - expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 15 (expr -> expr - expr .)
    )               reduce using rule 15 (expr -> expr - expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 27

    (16) expr -> expr + expr .
    (12) expr -> expr . % expr
    (13) expr -> expr . / expr
    (14) expr -> expr . * expr
    (15) expr -> expr . - expr
    (16) expr -> expr . + expr
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    $end            reduce using rule 16 (expr -> expr + expr .)
    )               reduce using rule 16 (expr -> expr + expr .)
    %               shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 28

    (10) expr -> ( expr ) .
    %               reduce using rule 10 (expr -> ( expr ) .)
    /               reduce using rule 10 (expr -> ( expr ) .)
    *               reduce using rule 10 (expr -> ( expr ) .)
    -               reduce using rule 10 (expr -> ( expr ) .)
    +               reduce using rule 10 (expr -> ( expr ) .)
    $end            reduce using rule 10 (expr -> ( expr ) .)
    )               reduce using rule 10 (expr -> ( expr ) .)


Conflicts:

shift/reduce conflict for % in state 23 resolved as shift
shift/reduce conflict for / in state 23 resolved as shift
shift/reduce conflict for * in state 23 resolved as shift
shift/reduce conflict for - in state 23 resolved as shift
shift/reduce conflict for + in state 23 resolved as shift
shift/reduce conflict for % in state 24 resolved as shift
shift/reduce conflict for / in state 24 resolved as shift
shift/reduce conflict for * in state 24 resolved as shift
shift/reduce conflict for - in state 24 resolved as shift
shift/reduce conflict for + in state 24 resolved as shift
shift/reduce conflict for % in state 25 resolved as shift
shift/reduce conflict for / in state 25 resolved as shift
shift/reduce conflict for * in state 25 resolved as shift
shift/reduce conflict for - in state 25 resolved as shift
shift/reduce conflict for + in state 25 resolved as shift
shift/reduce conflict for % in state 26 resolved as shift
shift/reduce conflict for / in state 26 resolved as shift
shift/reduce conflict for * in state 26 resolved as shift
shift/reduce conflict for - in state 26 resolved as shift
shift/reduce conflict for + in state 26 resolved as shift
shift/reduce conflict for % in state 27 resolved as shift
shift/reduce conflict for / in state 27 resolved as shift
shift/reduce conflict for * in state 27 resolved as shift
shift/reduce conflict for - in state 27 resolved as shift
shift/reduce conflict for + in state 27 resolved as shift
reduce/reduce conflict in state 2 resolved using rule statement -> IDENT  [precedence=left, level=3]
rejected rule (expr -> IDENT  [precedence=left, level=3]) in state 2